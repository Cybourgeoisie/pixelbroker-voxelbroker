<!DOCTYPE html>
<html>
<head>
    <title>Spritesheet to Voxel Character Converter</title>
    <script src="https://cdn.jsdelivr.net/npm/three@0.149/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three/examples/js/utils/BufferGeometryUtils.js"></script>
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: Arial, sans-serif;
            background-color: #1a1a1a;
            color: #ffffff;
        }
        #controls {
            margin-bottom: 20px;
            background-color: #2a2a2a;
            padding: 20px;
            border-radius: 8px;
        }
        #workCanvas {
            display: none;
        }
        #preview {
            border: 1px solid #444;
            margin-top: 10px;
            background-color: #2a2a2a;
        }
        .input-group {
            margin: 10px 0;
        }
        input[type="file"], input[type="number"] {
            background-color: #333;
            color: #fff;
            border: 1px solid #444;
            padding: 5px;
            border-radius: 4px;
        }
        button {
            background-color: #444;
            color: #fff;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
        }
        button:hover {
            background-color: #555;
        }
        label {
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <div id="controls">
        <div class="input-group">
            <label>Broker ID (0-10000): </label>
            <input type="number" id="brokerIdInput" value="0" min="0" max="10000">
            <button id="loadBrokerButton">Load Broker</button>
        </div>
        <div class="input-group">
            <label>Max Depth (number of voxels): </label>
            <input type="number" id="depthInput" value="3" min="1" max="20">
        </div>
        <div class="input-group">
            <label>Custom Depth Map: </label>
            <input type="file" id="depthMapInput" accept="image/*">
        </div>
        <div class="input-group">
            <label>Animation: </label>
            <button id="toggleAnimation">Toggle Walking</button>
        </div>
    </div>
    
    <canvas id="workCanvas"></canvas>
    <div id="preview"></div>

    <script>
        let scene, camera, renderer, controls;
        let isWalking = false;
        let currentFrame = 0;
        let animationInterval;
        let depthMapImage = null;
        
        // Load default depth map
        function loadDefaultDepthMap() {
            const defaultDepthMap = new Image();
            defaultDepthMap.onload = function() {
                depthMapImage = defaultDepthMap;
                // Reload current broker if one is loaded
                const brokerId = parseInt(document.getElementById('brokerIdInput').value);
                if (brokerId >= 0 && brokerId <= 10000) {
                    loadBroker(brokerId);
                }
            };
            defaultDepthMap.src = 'source/female_depth.png';
        }
        
        // Load default depth map on startup
        loadDefaultDepthMap();
        const FRAME_RATE = 4; // frames per second
        const SPRITE_ROWS = 8;
        const SPRITE_COLS = 6;
        
        function initThreeJS() {
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x1a1a1a);
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth * 0.8, window.innerHeight * 0.8);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            
            document.getElementById('preview').innerHTML = '';
            document.getElementById('preview').appendChild(renderer.domElement);
            
            // Lights
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.75);
            scene.add(ambientLight);
            
            const pointLight = new THREE.PointLight(0xffffff, 1, 100);
            pointLight.position.set(10, 20, -20);
            pointLight.castShadow = true;
            scene.add(pointLight);
            
            // Set up camera and controls after scene is created
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.screenSpacePanning = false;
            
            // Default camera position - will be adjusted when model is loaded
            camera.position.set(0, 0, 50);
            
            animate();
        }

        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }

        function getSpritesheetSlice(ctx, img, row, col, flip = false) {
            const spriteWidth = img.width / SPRITE_COLS;
            const spriteHeight = img.height / SPRITE_ROWS;
            const x = col * spriteWidth;
            const y = row * spriteHeight;
            
            if (!flip) {
                return ctx.getImageData(x, y, spriteWidth, spriteHeight);
            }
            
            // For flipped images, create a temporary canvas to flip the image
            const tempCanvas = document.createElement('canvas');
            const tempCtx = tempCanvas.getContext('2d');
            tempCanvas.width = spriteWidth;
            tempCanvas.height = spriteHeight;
            
            // Draw the section we want to flip
            tempCtx.translate(spriteWidth, 0);
            tempCtx.scale(-1, 1);
            tempCtx.drawImage(img, 
                x, y, spriteWidth, spriteHeight,  // source coordinates
                0, 0, spriteWidth, spriteHeight   // destination coordinates
            );
            
            return tempCtx.getImageData(0, 0, spriteWidth, spriteHeight);
        }

        function createVoxelModel(frontData, backData, maxDepth) {
            const voxels = [];
            const spriteWidth = frontData.width;
            const spriteHeight = frontData.height;
            
            // Helper to get pixel data
            function getPixel(imageData, x, y) {
                const index = (y * imageData.width + x) * 4;
                return {
                    r: imageData.data[index],
                    g: imageData.data[index + 1],
                    b: imageData.data[index + 2],
                    a: imageData.data[index + 3]
                };
            }
            
            // Create cached depth map data
            let depthMapData = null;
            let depthMapScaleX = 1;
            let depthMapScaleY = 1;
            
            if (depthMapImage) {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = depthMapImage.width;
                canvas.height = depthMapImage.height;
                ctx.drawImage(depthMapImage, 0, 0);
                depthMapData = ctx.getImageData(0, 0, depthMapImage.width, depthMapImage.height);
                depthMapScaleX = depthMapImage.width / spriteWidth;
                depthMapScaleY = depthMapImage.height / spriteHeight;
            }
            
            // Get depth from depth map
            function getDepth(x, y) {
                if (!depthMapData) return 1;
                
                // Scale coordinates to match depth map dimensions
                const depthX = Math.floor(x * depthMapScaleX);
                const depthY = Math.floor(y * depthMapScaleY);
                
                // Get pixel data from cached depth map
                const index = (depthY * depthMapData.width + depthX) * 4;
                const grayscale = depthMapData.data[index];
                
                // Use grayscale value to determine additional depth (0-255 -> 0-(maxDepth-1))
                // Add 1 to ensure minimum depth of 1
                return 1 + Math.floor((grayscale / 255) * (maxDepth - 1));
            }
            
            // Helper to get neighbor depth
            function getNeighborDepth(x, y, pixelDepths, side) {
                const neighbors = [
                    {x: x-1, y: y}, {x: x+1, y: y},
                    {x: x, y: y-1}, {x: x, y: y+1}
                ];
                
                for (const neighbor of neighbors) {
                    if (neighbor.x >= 0 && neighbor.x < spriteWidth &&
                        neighbor.y >= 0 && neighbor.y < spriteHeight) {
                        const key = `${neighbor.x},${neighbor.y}`;
                        if (pixelDepths.has(key)) {
                            return pixelDepths.get(key)[side];
                        }
                    }
                }
                return 1;
            }
            
            // Store pixel depths for neighbor lookups
            const pixelDepths = new Map();
            
            // First pass: calculate depths for non-transparent pixels
            for (let y = 0; y < spriteHeight; y++) {
                for (let x = 0; x < spriteWidth; x++) {
                    const frontPixel = getPixel(frontData, x, y);
                    const backPixel = getPixel(backData, x, y);
                    
                    if (frontPixel.a > 0 || backPixel.a > 0) {
                        const frontDepth = frontPixel.a > 0 ? getDepth(x, y) : 1;
                        const backDepth = backPixel.a > 0 ? getDepth(x, y) : 1;
                        pixelDepths.set(`${x},${y}`, {front: frontDepth, back: backDepth});
                    }
                }
            }
            
            // Second pass: create voxels with inherited depths for transparent areas
            for (let y = 0; y < spriteHeight; y++) {
                for (let x = 0; x < spriteWidth; x++) {
                    const frontPixel = getPixel(frontData, x, y);
                    const backPixel = getPixel(backData, x, y);
                    
                    if (frontPixel.a > 0 || backPixel.a > 0) {
                        const key = `${x},${y}`;
                        const depths = pixelDepths.has(key) ? 
                                     pixelDepths.get(key) : 
                                     {
                                         front: getNeighborDepth(x, y, pixelDepths, 'front'),
                                         back: getNeighborDepth(x, y, pixelDepths, 'back')
                                     };
                        
                        // Calculate total depth and center position
                        const totalDepth = depths.front + depths.back - 1; // -1 because center voxel counts for both
                        const centerOffset = Math.floor(totalDepth/2);
                        
                        // Create voxels for front half (only if front pixel is visible)
                        if (frontPixel.a > 0) {
                            for (let z = 0; z < depths.front; z++) {
                                voxels.push({
                                    x: x,
                                    y: -y,
                                    z: -z,  // Negative z for front
                                    color: `rgba(${frontPixel.r}, ${frontPixel.g}, ${frontPixel.b}, ${frontPixel.a / 255})`
                                });
                            }
                        }
                        
                        // Create voxels for back half (only if back pixel is visible)
                        if (backPixel.a > 0) {
                            for (let z = 0; z < depths.back; z++) {
                                voxels.push({
                                    x: x,
                                    y: -y,
                                    z: z,  // Positive z for back
                                    color: `rgba(${backPixel.r}, ${backPixel.g}, ${backPixel.b}, ${backPixel.a / 255})`
                                });
                            }
                        }
                    }
                }
            }
            
            return voxels;
        }

        function createVoxelMesh(voxels) {
            const geometries = [];
            const matrix = new THREE.Matrix4();
            const color = new THREE.Color();

            // Calculate the center of the model
            let minX = Infinity, maxX = -Infinity;
            let minY = Infinity, maxY = -Infinity;
            let minZ = Infinity, maxZ = -Infinity;

            voxels.forEach(voxel => {
                minX = Math.min(minX, voxel.x);
                maxX = Math.max(maxX, voxel.x);
                minY = Math.min(minY, voxel.y);
                maxY = Math.max(maxY, voxel.y);
                minZ = Math.min(minZ, voxel.z);
                maxZ = Math.max(maxZ, voxel.z);
            });

            const centerX = (minX + maxX) / 2;
            const centerY = (minY + maxY) / 2;
            const centerZ = (minZ + maxZ) / 2;

            voxels.forEach(voxel => {
                const geometry = new THREE.BoxGeometry(1, 1, 1);
                const voxelColor = new THREE.Color(voxel.color);
                
                // Center the model around origin
                matrix.makeTranslation(
                    voxel.x - centerX, 
                    voxel.y - centerY, 
                    voxel.z - centerZ
                );
                
                const positionAttribute = geometry.getAttribute('position');
                const colors = new Float32Array(positionAttribute.count * 3);
                color.set(voxelColor);
                
                for (let i = 0; i < colors.length; i += 3) {
                    colors[i] = color.r;
                    colors[i + 1] = color.g;
                    colors[i + 2] = color.b;
                }
                
                geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
                geometry.applyMatrix4(matrix);
                geometries.push(geometry);
            });

            const mergedGeometry = THREE.BufferGeometryUtils.mergeBufferGeometries(geometries, false);
            const material = new THREE.MeshLambertMaterial({ vertexColors: true });
            const mesh = new THREE.Mesh(mergedGeometry, material);
            mesh.castShadow = true;
            mesh.receiveShadow = true;

            // Calculate model dimensions for camera positioning
            const size = new THREE.Vector3(
                maxX - minX,
                maxY - minY,
                maxZ - minZ
            );
            
            // Store size and center information on the mesh for camera setup
            mesh.userData.size = size;
            
            return mesh;
        }

        function processSpritesheetFrame(img, frameIndex = null) {
            const canvas = document.getElementById('workCanvas');
            const ctx = canvas.getContext('2d');
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);

            let frontSlice, backSlice;
            
            if (isWalking && frameIndex !== null) {
                // Walking animation - use row 1 for front (index 0) and row 3 for back (index 2)
                frontSlice = getSpritesheetSlice(ctx, img, 0, frameIndex, false);
                backSlice = getSpritesheetSlice(ctx, img, 2, frameIndex, true);
            } else {
                // Standing pose - use row 5 for front (index 4) and row 7 for back (index 6)
                frontSlice = getSpritesheetSlice(ctx, img, 4, 0, false);
                backSlice = getSpritesheetSlice(ctx, img, 6, 0, true);
            }
            
            const depth = parseInt(document.getElementById('depthInput').value);
            const voxels = createVoxelModel(frontSlice, backSlice, depth);
            
            // Initialize Three.js scene if not already done
            if (!scene) {
                initThreeJS();
            } else {
                // Clear existing mesh but preserve lights
                const lights = scene.children.filter(child => child instanceof THREE.Light);
                scene.clear();
                lights.forEach(light => scene.add(light));
            }
            
            const voxelMesh = createVoxelMesh(voxels);
            scene.add(voxelMesh);

            // Only set camera position on initial load
            if (!scene.userData.cameraInitialized) {
                const size = voxelMesh.userData.size;
                const maxDimension = Math.max(size.x, size.y, size.z);
                const fov = camera.fov * (Math.PI / 180);
                const cameraDistance = Math.abs(maxDimension / Math.sin(fov / 2)) * 1.5;

                camera.position.set(cameraDistance * 0.5, cameraDistance * 0.5, cameraDistance * 0.5);
                camera.lookAt(0, 0, 0);
                controls.target.set(0, 0, 0);
                controls.update();
                
                scene.userData.cameraInitialized = true;
            }
        }

        function startAnimation(img) {
            if (animationInterval) {
                clearInterval(animationInterval);
            }
            
            if (isWalking) {
                currentFrame = 0;
                animationInterval = setInterval(() => {
                    processSpritesheetFrame(img, currentFrame);
                    currentFrame = (currentFrame + 1) % SPRITE_COLS;
                }, 1000 / FRAME_RATE);
            } else {
                processSpritesheetFrame(img);
            }
        }

        function loadBroker(brokerId) {
            const img = new Image();
            img.crossOrigin = "anonymous";  // Add this line to enable CORS
            img.onload = function() {
                startAnimation(img);
            };
            img.onerror = function() {
                console.error('Failed to load broker image:', brokerId);
                alert('Failed to load broker image ' + brokerId);
            };
            img.src = `https://cb-media.sfo3.cdn.digitaloceanspaces.com/pixelbrokers/current/sprites/${brokerId}.png`;
        }

        document.getElementById('loadBrokerButton').addEventListener('click', function() {
            const brokerId = parseInt(document.getElementById('brokerIdInput').value);
            if (brokerId >= 0 && brokerId <= 10000) {
                loadBroker(brokerId);
            } else {
                alert('Please enter a broker ID between 0 and 10000');
            }
        });

        document.getElementById('depthInput').addEventListener('change', function() {
            // Reload current broker if one is loaded
            const brokerId = parseInt(document.getElementById('brokerIdInput').value);
            if (brokerId >= 0 && brokerId <= 10000) {
                loadBroker(brokerId);
            }
        });

        // Handle custom depth map upload
        document.getElementById('depthMapInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    const img = new Image();
                    img.onload = function() {
                        depthMapImage = img;
                        // Reload current broker
                        const brokerId = parseInt(document.getElementById('brokerIdInput').value);
                        if (brokerId >= 0 && brokerId <= 10000) {
                            loadBroker(brokerId);
                        }
                    };
                    img.src = event.target.result;
                };
                reader.readAsDataURL(file);
            } else {
                loadDefaultDepthMap();
            }
        });

        // Load initial broker (0)
        loadBroker(0);

        // Add toggle animation functionality
        document.getElementById('toggleAnimation').addEventListener('click', function() {
            isWalking = !isWalking;
            this.textContent = isWalking ? 'Stop Walking' : 'Start Walking';
            
            // Reload current broker with new animation state
            const brokerId = parseInt(document.getElementById('brokerIdInput').value);
            if (brokerId >= 0 && brokerId <= 10000) {
                loadBroker(brokerId);
            }
        });
    </script>
</body>
</html>